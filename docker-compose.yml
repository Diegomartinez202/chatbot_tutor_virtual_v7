name: tutorbot-local
version: "3.9"

services:
  # -------------------------
  # üì¶ MongoDB (persistente)
  # -------------------------
  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-net

  # ------------------------------------
  # üß† Rasa (Core/NLU) + REST en :5005
  # ------------------------------------
  rasa:
    build:
      context: ./rasa
      dockerfile: Dockerfile   # (ok) ./rasa/Dockerfile
    container_name: rasa
    restart: unless-stopped
    environment:
      ACTION_SERVER_URL: http://action-server:5055/webhook
      RASA_AUTOTRAIN: "true"
    ports:
      - "5005:5005"
    depends_on:
      - action-server
    networks:
      - app-net

  # ---------------------------------------
  # ‚öôÔ∏è Rasa Action Server (custom actions)
  # ---------------------------------------
  action-server:
    build:
      context: ./rasa_action_server
      dockerfile: Dockerfile   # (ok) ./rasa_action_server/Dockerfile
    container_name: action-server
    restart: unless-stopped
    ports:
      - "5055:5055"
    networks:
      - app-net

  # -------------------------------------
  # üêç Backend FastAPI (API + Admin2)
  # -------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile   # (ok) ./backend/Dockerfile
    container_name: backend
    restart: unless-stopped
    # Cargamos primero .env ra√≠z (recomendado) y conservamos ./backend/.env (si lo ten√≠as)
    env_file:
      - ./.env
      - ./backend/.env
    environment:
      # üëâ Forzamos las URLs internas de Compose (no cambian tu l√≥gica)
      MONGO_URI: mongodb://mongo:27017/tutor_virtual
      MONGO_DB_NAME: tutor_virtual
      RASA_URL: http://rasa:5005
      # Frontend (desde navegador) seguir√° en http://localhost:8080
      FRONTEND_SITE_URL: http://localhost:8080
      # En backend se parsea CSV o JSON; dejamos JSON para evitar dudas
      ALLOWED_ORIGINS: '["http://localhost:8080","http://localhost:5173"]'
      APP_ENV: dev
      DEBUG: "true"
    depends_on:
      - mongo
      - rasa
    ports:
      - "8000:8000"
    networks:
      - app-net
    # Si quer√©s ver logs en host, descomenta y ajust√° ruta de tu proyecto:
    # volumes:
    #   - ./backend/logs:/app/logs

  # ----------------------------------------
  # üñ•Ô∏è Admin Panel (React/Nginx) en :8080
  # ----------------------------------------
  admin:
    build:
      context: ./admin_panel_react
      dockerfile: Dockerfile   # (ok) ./admin_panel_react/Dockerfile
    container_name: admin
    restart: unless-stopped
    # Si tu imagen del panel necesita variables de build/runtime, pod√©s
    # agregarlas aqu√≠ o en .env (Vite/ENV inyectadas en build).
    # env_file:
    #   - ./.env
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app-net

  # ----------------------------------------------------------
  # (Opcional) Redis para RATE_LIMIT_BACKEND=redis en backend
  # ----------------------------------------------------------
  # redis:
  #   image: redis:7
  #   container_name: redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-net

networks:
  app-net:
    driver: bridge

volumes:
  mongo-data:
  
services:
  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    depends_on:
      - backend
      - rasa
      - admin
    ports:
      - "80:80"
      # - "443:443"  # si agregas TLS
    volumes:
      - ./ops/nginx/conf.d:/etc/nginx/conf.d:ro
      # - ./ops/nginx/certs:/etc/nginx/certs:ro   # si usas TLS
    networks:
      - app-net
- 

version: "3.9"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev          # ‚Üê usa el stage DEV del Dockerfile
    environment:
      APP_ENV: dev
      DEBUG: "true"
    command: sh -c "uvicorn backend.main:app --reload --host 0.0.0.0 --port 8000"
    volumes:
      - ./backend:/app/backend            # hot-reload del c√≥digo
      - ./backend/requirements.txt:/app/requirements.txt

  rasa:
    # Si tu imagen ya tiene entrypoint, no toques 'command'.
    # Para correr Rasa "crudo" en local descomenta:
    # command: sh -c "rasa run --enable-api --cors '*' --port 5005"
    volumes:
      - ./rasa:/app/rasa

  action-server:
    volumes:
      - ./rasa:/app/rasa
- 

name: tutorbot-local
version: "3.9"

services:
  # -------------------------
  # üì¶ MongoDB (persistente)
  # -------------------------
  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-net

  # ------------------------------------
  # üß† Rasa (Core/NLU) + REST en :5005
  # ------------------------------------
  rasa:
    build:
      context: ./rasa
      dockerfile: Dockerfile
    container_name: rasa
    restart: unless-stopped
    environment:
      ACTION_SERVER_URL: http://action-server:5055/webhook
      RASA_AUTOTRAIN: "true"
    ports:
      - "5005:5005"
    depends_on:
      - action-server
    networks:
      - app-net

  # ---------------------------------------
  # ‚öôÔ∏è Rasa Action Server (custom actions)
  # ---------------------------------------
  action-server:
    build:
      context: ./rasa_action_server
    container_name: action-server
    restart: unless-stopped
    ports:
      - "5055:5055"
    networks:
      - app-net

  # -------------------------------------
  # üêç Backend FastAPI (API + Admin2)
  # -------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: prod          # ‚Üê usa el stage PROD del Dockerfile
    container_name: backend
    restart: unless-stopped
    # Carga .env ra√≠z (frontend/SSO) + .env backend (si lo usas)
    env_file:
      - ./.env
      - ./backend/.env
    environment:
      # üëâ Forzamos URLs internas del cluster Docker (no rompen tu l√≥gica)
      MONGO_URI: mongodb://mongo:27017/tutor_virtual
      MONGO_DB_NAME: tutor_virtual
      RASA_URL: http://rasa:5005
      # Or√≠genes de frontend (panel/SPA). Usa JSON (tu settings lo parsea CSV/JSON).
      ALLOWED_ORIGINS: '["http://localhost:8080","http://localhost:5173"]'
      FRONTEND_SITE_URL: http://localhost:8080
      APP_ENV: prod
      DEBUG: "false"
    depends_on:
      - mongo
      - rasa
    ports:
      - "8000:8000"
    networks:
      - app-net
    # (Opcional) montar logs a host:
    # volumes:
    #   - ./backend/logs:/app/logs

  # ----------------------------------------
  # üñ•Ô∏è Admin Panel (React/Nginx) en :8080
  # ----------------------------------------
  admin:
    build:
      context: ./admin_panel_react
      dockerfile: Dockerfile
    container_name: admin
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app-net

  # ----------------------------------------------------------
  # (Opcional) Redis para RATE_LIMIT_BACKEND=redis en backend
  # ----------------------------------------------------------
  # redis:
  #   image: redis:7
  #   container_name: redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-net

networks:
  app-net:
    driver: bridge

volumes:
  mongo-data:
   