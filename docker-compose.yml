name: tutorbot-local
version: "3.9"

# =========================
# Redes y volúmenes
# =========================
networks:
  app-net:
    driver: bridge

volumes:
  mongo-data:               # modo build (tu primera versión)
  _docker_data_mongo:       # modo vanilla (la segunda versión)
  # redis-data:             # si activas redis más adelante

services:

  # ─────────────────────────────────────────────────────────────
  # 📦 MongoDB (perfil: build) — sin auth, volumen "mongo-data"
  # ─────────────────────────────────────────────────────────────
  mongo:
    profiles: ["build"]
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-net

  # ───────────────────────────────────────────────────────────────
  # 📦 MongoDB (perfil: vanilla) — con auth vía variables de entorno
  # ───────────────────────────────────────────────────────────────
  ctv_mongo:
    profiles: ["vanilla"]
    image: mongo:6.0
    container_name: ctv_mongo
    restart: unless-stopped
    environment:
      # define en tu .env (o exporta) antes de levantar:
      # MONGO_INITDB_ROOT_USERNAME=admin
      # MONGO_INITDB_ROOT_PASSWORD=admin123
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - _docker_data_mongo:/data/db
    networks:
      - app-net

  # ─────────────────────────────────────────────
  # 🧠 Rasa (perfil: build) — build desde ./rasa
  # ─────────────────────────────────────────────
  rasa:
    profiles: ["build"]
    build:
      context: ./rasa
      dockerfile: Dockerfile
    container_name: rasa
    restart: unless-stopped
    environment:
      ACTION_SERVER_URL: http://action-server:5055/webhook
      RASA_AUTOTRAIN: "true"
    ports:
      - "5005:5005"
    depends_on:
      - action-server
      - mongo
    networks:
      - app-net

  # ────────────────────────────────────────────────────────────────
  # 🧠 Rasa (perfil: vanilla) — imagen oficial + monta ./rasa
  # ────────────────────────────────────────────────────────────────
  ctv_rasa:
    profiles: ["vanilla"]
    image: rasa/rasa:3.6.19
    container_name: ctv_rasa
    restart: unless-stopped
    command: >
      rasa run
      --enable-api
      --cors "*"
      --port ${RASA_PORT:-5005}
    working_dir: /app/rasa
    volumes:
      - ./rasa:/app/rasa
    ports:
      - "${RASA_PORT:-5005}:5005"
    depends_on:
      - ctv_mongo
    networks:
      - app-net

  # ──────────────────────────────────────────────────
  # ⚙️ Rasa Action Server (perfil: build) — ./rasa_action_server
  # ──────────────────────────────────────────────────
  action-server:
    profiles: ["build"]
    build:
      context: ./rasa_action_server
      dockerfile: Dockerfile
    container_name: action-server
    restart: unless-stopped
    ports:
      - "5055:5055"
    networks:
      - app-net

  # ─────────────────────────────────────────────────────────────
  # ⚙️ Rasa Action Server (perfil: vanilla) — imagen oficial SDK
  # ─────────────────────────────────────────────────────────────
  ctv_rasa_actions:
    profiles: ["vanilla"]
    image: rasa/rasa-sdk:3.6.2
    container_name: ctv_rasa_actions
    restart: unless-stopped
    working_dir: /app
    command: ["python", "-m", "rasa_sdk", "--actions", "actions"]
    volumes:
      - ./rasa/actions:/app/actions
    ports:
      - "5055:5055"
    depends_on:
      - ctv_rasa
    networks:
      - app-net

  # ─────────────────────────────────────────────
  # 🐍 Backend FastAPI (perfil: build) — ./backend
  # ─────────────────────────────────────────────
  backend:
    profiles: ["build"]
    build:
      context: ./backend
      dockerfile: Dockerfile
      # target: prod   # descomenta si tu Dockerfile es multi-stage
    container_name: backend
    restart: unless-stopped
    env_file:
      - ./.env
      - ./backend/.env
    environment:
      # 👉 URLs internas en la red de Compose (no cambian tu lógica)
      MONGO_URI: mongodb://mongo:27017/tutor_virtual
      MONGO_DB_NAME: tutor_virtual
      RASA_URL: http://rasa:5005
      ALLOWED_ORIGINS: '["http://localhost:8080","http://localhost:5173"]'
      FRONTEND_SITE_URL: http://localhost:8080
      APP_ENV: dev
      DEBUG: "true"
    depends_on:
      - mongo
      - rasa
    ports:
      - "8000:8000"
    networks:
      - app-net
    # volumes:
    #   - ./backend/logs:/app/logs

  # ───────────────────────────────────────────────────────────────
  # 🐍 Backend FastAPI (perfil: vanilla) — imagen python + monta ./backend
  # ───────────────────────────────────────────────────────────────
  ctv_fastapi:
    profiles: ["vanilla"]
    image: python:3.11-slim
    container_name: ctv_fastapi
    restart: unless-stopped
    working_dir: /app
    environment:
      PYTHONUNBUFFERED: "1"
      # Ajusta a tus variables reales:
      # Si usas ctv_mongo con auth, define MONGO_DB y credenciales en .env
      MONGO_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-admin123}@ctv_mongo:27017/${MONGO_DB:-chatbot}?authSource=admin"
      RASA_BASE_URL: "http://ctv_rasa:${RASA_PORT:-5005}"
    volumes:
      - ./backend:/app/backend
    command: >
      bash -lc "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        if [ -f backend/requirements.txt ]; then pip install --no-cache-dir -r backend/requirements.txt; fi &&
        python -m uvicorn backend.main:app --host 0.0.0.0 --port ${FASTAPI_PORT:-8000}
      "
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    depends_on:
      - ctv_mongo
      - ctv_rasa
    networks:
      - app-net

  # ─────────────────────────────────────────────
  # 🖥️ Admin Panel (React/Nginx) — solo en modo build
  # ─────────────────────────────────────────────
  admin:
    profiles: ["build"]
    build:
      context: ./admin_panel_react
      dockerfile: Dockerfile
    container_name: admin
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app-net

  # ─────────────────────────────────────────────────────────────
  # 🌐 Nginx reverse proxy — solo en modo build
  #   /         → Admin
  #   /api      → FastAPI
  #   /rasa,/ws → Rasa
  # ─────────────────────────────────────────────────────────────
  nginx:
    profiles: ["build"]
    image: nginx:1.27-alpine
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - backend
      - rasa
      - admin
    ports:
      - "80:80"
      # - "443:443"   # si agregas TLS
    volumes:
      - ./ops/nginx/conf.d:/etc/nginx/conf.d:ro
      # - ./ops/nginx/certs:/etc/nginx/certs:ro   # si usas TLS
    networks:
      - app-net

  # ─────────────────────────────────────────────────────────────
  # (Opcional) Redis si activas RATE_LIMIT_BACKEND=redis
  # ─────────────────────────────────────────────────────────────
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis
  #   command: ["redis-server","--appendonly","yes"]
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - app-net
