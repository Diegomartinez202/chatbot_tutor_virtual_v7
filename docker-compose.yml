name: tutorbot-local
version: "3.9"   # Compose v2 puede ignorarlo; ok mantenerlo

# =========================
# Redes y volúmenes
# =========================
networks:
  app-net:
    driver: bridge

volumes:
  mongo-data:               # modo build/prod
  _docker_data_mongo:       # modo vanilla
  redis-data:               # para Redis (rate-limit/cache)

services:

  # ─────────────────────────────────────────────────────────────
  # 📦 MongoDB (común a build/prod)
  # ─────────────────────────────────────────────────────────────
  mongo:
    profiles: ["build","prod"]
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks: [app-net]

  # ───────────────────────────────────────────────────────────────
  # 📦 MongoDB (perfil: vanilla) — con auth
  # ───────────────────────────────────────────────────────────────
  ctv_mongo:
    profiles: ["vanilla"]
    image: mongo:6.0
    container_name: ctv_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - _docker_data_mongo:/data/db
    networks: [app-net]

  # ─────────────────────────────────────────────
  # ⚙️ Rasa Action Server (build/prod)
  #   Opción A: copia tus acciones desde ./rasa/actions
  # ─────────────────────────────────────────────
  action-server:
    profiles: ["build","prod"]
    build:
      context: .                       # raíz para poder COPY rasa/actions
      dockerfile: rasa_action_server/Dockerfile
    container_name: action-server
    restart: unless-stopped
    environment:
      HELPDESK_WEBHOOK: http://backend:8000/api/helpdesk/tickets
      ACTIONS_LOG_LEVEL: INFO
    ports:
      - "5055:5055"
    networks: [app-net]

  # ─────────────────────────────────────────────
  # 🤖 Rasa (build/prod) — build desde ./rasa
  # ─────────────────────────────────────────────
  rasa:
    profiles: ["build","prod"]
    build:
      context: ./rasa
      dockerfile: Dockerfile
    container_name: rasa
    restart: unless-stopped
    environment:
      ACTION_SERVER_URL: http://action-server:5055/webhook
      RASA_PORT: "5005"
      RASA_AUTOTRAIN: "true"   # entrena si no hay modelo
      # (opcional) Tracker en Mongo → usa plantilla 'mongo'
      # ENDPOINTS_TEMPLATE: "mongo"
      # TRACKER_MONGO_URL: "mongodb://mongo:27017"
      # TRACKER_MONGO_DB: "rasa"
      # TRACKER_MONGO_COLLECTION: "conversations"
    depends_on:
      - action-server
    ports:
      - "5005:5005"
    networks: [app-net]
    healthcheck:
      test: ["CMD", "sh", "-lc", "wget -qO- http://127.0.0.1:5005/status | grep -q 'version'"]
      interval: 30s
      timeout: 5s
      retries: 5

  # ────────────────────────────────────────────────────────────────
  # 🧠 Rasa (perfil: vanilla) — imagen oficial + monta ./rasa
  # ────────────────────────────────────────────────────────────────
  ctv_rasa:
    profiles: ["vanilla"]
    image: rasa/rasa:3.6.19
    container_name: ctv_rasa
    restart: unless-stopped
    command: >
      rasa run
      --enable-api
      --cors "*"
      --port ${RASA_PORT:-5005}
    working_dir: /app/rasa
    volumes:
      - ./rasa:/app/rasa
    ports:
      - "${RASA_PORT:-5005}:5005"
    depends_on:
      - ctv_mongo
    networks: [app-net]

  # ─────────────────────────────────────────────────────────────
  # ⚙️ Rasa Action Server (perfil: vanilla) — SDK oficial
  # ─────────────────────────────────────────────────────────────
  ctv_rasa_actions:
    profiles: ["vanilla"]
    image: rasa/rasa-sdk:3.6.2
    container_name: ctv_rasa_actions
    restart: unless-stopped
    working_dir: /app
    command: ["python", "-m", "rasa_sdk", "--actions", "actions"]
    volumes:
      - ./rasa/actions:/app/actions
    ports:
      - "5055:5055"
    depends_on:
      - ctv_rasa
    networks: [app-net]

  # ============================
  # 🐍 Backend DEV (hot reload)
  # ============================
  backend-dev:
    profiles: ["build"]
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev               # uvicorn --reload
    container_name: backend-dev
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      MONGO_URI: mongodb://mongo:27017/chatbot_tutor_virtual_v2
      RASA_URL: http://rasa:5005
      APP_ENV: dev
      DEBUG: "true"
      # 🔒 Rate-limit (builtin + Redis)
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_PROVIDER: builtin
      RATE_LIMIT_BACKEND: redis
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app/backend  # recarga en caliente
    depends_on:
      - mongo
      - rasa
      - redis
    ports:
      - "8000:8000"
    networks: [app-net]
    healthcheck:
      test: ["CMD", "sh", "-lc", "curl -fsS http://127.0.0.1:8000/chat/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  # ======================================
  # 🖥️ Frontend DEV (Vite con hot reload)
  # ======================================
  admin-dev:
    profiles: ["build"]
    image: node:18-alpine
    container_name: admin-dev
    working_dir: /app
    command: sh -lc "npm ci && npm run dev -- --host --port 5173"
    volumes:
      - ./admin_panel_react:/app
    environment:
      VITE_API_BASE: http://localhost:8000
      VITE_RASA_HTTP: http://localhost:5005
      VITE_RASA_WS: ws://localhost:5005
    ports:
      - "5173:5173"
    depends_on:
      - backend-dev
    networks: [app-net]

  # ============================
  # 🐍 Backend PROD (Uvicorn)
  # ============================
  backend:
    profiles: ["prod"]
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: prod              # etapa optimizada
    container_name: backend
    restart: unless-stopped
    env_file:
      - ./backend/.env.production
    environment:
      UVICORN_WORKERS: "2"
      APP_ENV: prod
      DEBUG: "false"
      MONGO_URI: mongodb://mongo:27017/chatbot_tutor_virtual_v2
      RASA_URL: http://rasa:5005
      # 🔒 Rate-limit (builtin + Redis)
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_PROVIDER: builtin
      RATE_LIMIT_BACKEND: redis
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - mongo
      - rasa
      - redis
    ports:
      - "8000:8000"
    networks: [app-net]
    healthcheck:
      test: ["CMD", "sh", "-lc", "curl -fsS http://127.0.0.1:8000/chat/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  # ==================================
  # 🖥️ Frontend PROD (Nginx + build)
  # ==================================
  admin:
    profiles: ["prod"]
    build:
      context: ./admin_panel_react
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: /api
        VITE_RASA_HTTP: /rasa
        VITE_RASA_WS: /ws
    container_name: admin
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks: [app-net]

  # =========================================
  # 🌐 Nginx Reverse Proxy (solo en prod)
  #   /         → Admin
  #   /api      → FastAPI
  #   /rasa,/ws → Rasa
  # =========================================
  nginx:
    profiles: ["prod"]
    image: nginx:1.27-alpine
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - backend
      - rasa
      - admin
    ports:
      - "80:80"
      - "443:443"   # si activas TLS
    volumes:
      - ./ops/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ops/nginx/certs:/etc/nginx/certs:ro
    networks: [app-net]

  # =========================================
  # 🌐 Nginx Reverse Proxy (solo en build)
  # =========================================
  nginx-dev:
    profiles: ["build"]
    image: nginx:1.27-alpine
    container_name: nginx-dev
    restart: unless-stopped
    depends_on:
      - backend-dev
      - rasa
      - admin-dev
    ports:
      - "80:80"
    volumes:
      - ./ops/nginx/conf.d:/etc/nginx/conf.d:ro
    networks: [app-net]

  # ─────────────────────────────────────────────────────────────
  # 🐍 Backend "vanilla" (monta backend/)
  # ─────────────────────────────────────────────────────────────
  ctv_fastapi:
    profiles: ["vanilla"]
    image: python:3.11-slim
    container_name: ctv_fastapi
    restart: unless-stopped
    working_dir: /app
    environment:
      PYTHONUNBUFFERED: "1"
      MONGO_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-admin123}@ctv_mongo:27017/${MONGO_DB:-chatbot}?authSource=admin"
      RASA_BASE_URL: "http://ctv_rasa:${RASA_PORT:-5005}"
    volumes:
      - ./backend:/app/backend
    command: >
      bash -lc "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        if [ -f backend/requirements.txt ]; then pip install --no-cache-dir -r backend/requirements.txt; fi &&
        python -m uvicorn backend.main:app --host 0.0.0.0 --port ${FASTAPI_PORT:-8000}
      "
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    depends_on:
      - ctv_mongo
      - ctv_rasa
    networks: [app-net]

  # ─────────────────────────────────────────────────────────────
  # 🧰 Redis (rate-limit/cache) — opcional pero activado aquí
  # ─────────────────────────────────────────────────────────────
  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server","--appendonly","yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-net