name: tutorbot-local
version: "3.9"

services:
  # -------------------------
  # üì¶ MongoDB (persistente)
  # -------------------------
  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-net

  # ------------------------------------
  # üß† Rasa (Core/NLU) + REST en :5005
  # ------------------------------------
  rasa:
    build:
      context: ./rasa
      dockerfile: Dockerfile
    container_name: rasa
    restart: unless-stopped
    environment:
      ACTION_SERVER_URL: http://action-server:5055/webhook
      RASA_AUTOTRAIN: "true"
    ports:
      - "5005:5005"
    depends_on:
      - action-server
    networks:
      - app-net

  # ---------------------------------------
  # ‚öôÔ∏è Rasa Action Server (custom actions)
  # ---------------------------------------
  action-server:
    build:
      context: ./rasa_action_server
      dockerfile: Dockerfile
    container_name: action-server
    restart: unless-stopped
    ports:
      - "5055:5055"
    networks:
      - app-net

  # -------------------------------------
  # üêç Backend FastAPI (API + Admin2)
  # -------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      # Si tu Dockerfile es multi-stage, puedes forzar:
      # target: prod   # (usa override para dev con --reload)
    container_name: backend
    restart: unless-stopped
    # Carga .env ra√≠z (frontend/SSO) + .env espec√≠fico del backend (si existe)
    env_file:
      - ./.env
      - ./backend/.env
    environment:
      # üëâ URLs internas de la red de Compose (no cambian tu l√≥gica)
      MONGO_URI: mongodb://mongo:27017/tutor_virtual
      MONGO_DB_NAME: tutor_virtual
      RASA_URL: http://rasa:5005
      # Or√≠genes de frontend (panel/SPA). JSON v√°lido (tu Settings acepta CSV/JSON)
      ALLOWED_ORIGINS: '["http://localhost:8080","http://localhost:5173"]'
      FRONTEND_SITE_URL: http://localhost:8080
      APP_ENV: dev
      DEBUG: "true"
    depends_on:
      - mongo
      - rasa
    ports:
      - "8000:8000"
    networks:
      - app-net
    # (Opcional) Montar logs en host:
    # volumes:
    #   - ./backend/logs:/app/logs

  # ----------------------------------------
  # üñ•Ô∏è Admin Panel (React/Nginx) en :8080
  # ----------------------------------------
  admin:
    build:
      context: ./admin_panel_react
      dockerfile: Dockerfile
    container_name: admin
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app-net

  # ----------------------------------------
  # üåê Nginx reverse proxy (/: Admin, /api: FastAPI, /rasa y /ws: Rasa)
  # ----------------------------------------
  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - backend
      - rasa
      - admin
    ports:
      - "80:80"
      # - "443:443"   # si agregas TLS
    volumes:
      - ./ops/nginx/conf.d:/etc/nginx/conf.d:ro
      # - ./ops/nginx/certs:/etc/nginx/certs:ro   # si usas TLS
    networks:
      - app-net

  # ----------------------------------------------------------
  # (Opcional) Redis si activas RATE_LIMIT_BACKEND=redis
  # ----------------------------------------------------------
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis
  #   command: ["redis-server","--appendonly","yes"]
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - app-net

networks:
  app-net:
    driver: bridge

volumes:
  mongo-data:
  # redis-data: